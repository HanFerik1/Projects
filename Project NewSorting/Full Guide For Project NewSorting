The NewSorting program is designed to process a list of integers entered by the user. It performs various operations, including finding the maximum and minimum values, calculating the total sum and average, and sorting the array using the Bubble Sort algorithm. The program is structured into modular methods, each responsible for a specific task, ensuring clarity and reusability.

The program begins with the sortingInput() method, which collects user input to populate the array. The user first specifies the size of the array, followed by entering each element. A Scanner object is used to read input, and the program validates each entry. If the input is invalid, such as a non-integer value, it defaults the array element to 0. This ensures the program can handle incorrect input gracefully while maintaining functionality.

Next, the calculateMaximum() and calculateMinimum() methods analyze the array to find the largest and smallest values, respectively. Both methods initialize their result variables (maximum and minimum) with the first element of the array. They then iterate through the array, comparing each value with the current result and updating it if a larger or smaller value is found. These methods use simple loops, ensuring efficiency and clarity in determining the required values.

The calculateSum() and calculateAverage() methods provide additional analysis of the array. The calculateSum() method iterates through the array, adding each element to a running total. This sum is then used by the calculateAverage() method, which divides the total by the array length to compute the average. The separation of these tasks ensures modularity, with each method focused on a single responsibility.

The sorting functionality is handled by the bubbleSort() method, which uses the Bubble Sort algorithm to sort the array in ascending order. The method compares adjacent elements and swaps them if they are out of order. This process is repeated for each pass through the array until it is fully sorted. The program also prints the array after each pass, allowing the user to observe the progress of the sorting step by step. Additionally, the method is optimized to terminate early if no swaps occur in a pass, indicating the array is already sorted.

Finally, the printArray() method is used to display the array at various stages of the program. It iterates through the array and prints each element, separated by spaces. This method enhances readability and ensures a consistent format for presenting the array.

Overall, the NewSorting program effectively combines user interaction with computational logic to analyze and manipulate an array of integers. It demonstrates foundational programming concepts such as input validation, iterative processing, and sorting algorithms, making it a clear and functional example of modular design.
