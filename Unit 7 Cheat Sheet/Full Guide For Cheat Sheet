This Java program demonstrates various basic, intermediate, and advanced operations on ArrayList collections. The class CheatSheet is structured to tackle different array manipulations, such as adding, updating, removing elements, and using loops for traversing the list. The first set of operations focuses on basic ArrayList operations. It begins by showing how to create and initialize an ArrayList of integers and add elements such as 10, 20, 30, 40, and 50. After adding these elements, the program prints the entire ArrayList to show the result. Next, it works with a String ArrayList containing names like "Alice," "Bob," and "Charlie." The program replaces "Bob" with "David" using the set() method and prints the updated list to reflect this change. The program then removes an element at a specific index—index 2—demonstrating the remove() method, and prints the modified list. Following this, the program checks if a specific name, "Alice," exists in the list using the contains() method, and prints "Found" if it is present, or "Not Found" if it isn't. The final part of this section involves finding the size of an ArrayList before and after adding elements, using the size() method to show how the list's size changes as elements are added.

The next section focuses on traversing ArrayLists. The program uses a for-each loop to print each element of an ArrayList of integers, specifically the numbers 1, 2, 3, 4, and 5. This demonstrates a simple and efficient way to loop through a collection. It also shows how to use a traditional for loop to traverse the list by accessing each element using the get() method and iterating through the list based on its size. The program then reverses the order of elements in an ArrayList of integers (10, 20, 30, 40) by using the Collections.reverse() method, and prints the reversed list. Following that, it calculates the sum of all elements in an ArrayList of integers by iterating through the list with a loop and adding the elements together. It then counts how many even numbers are in the list by checking if each number is divisible by 2 and printing the result.

Moving on to algorithmic tasks, the program tackles some common problems. It finds the maximum and minimum values in an ArrayList of integers using the Collections.max() and Collections.min() methods, respectively. The program also removes duplicate values from an ArrayList by iterating through the list and adding only unique elements to a new ArrayList. Afterward, it searches for the index of a specific element (e.g., "Bob") in a String ArrayList using the indexOf() method, printing the index of the element or -1 if it doesn't exist. The program also demonstrates how to insert a new element at a specific index in the ArrayList using the add(index, element) method. Finally, it merges two ArrayLists of integers into one by using the addAll() method and prints the combined result.

The last section covers advanced ArrayList operations. The program begins by sorting an ArrayList of integers in ascending order using the Collections.sort() method. It then removes all elements greater than a given value (50) by using the removeIf() method, which removes elements that meet a specific condition. Next, the program calculates the median value of an ArrayList of integers. To find the median, the list is first sorted, and then the middle element is retrieved to calculate the median. The program also counts how many times each unique element appears in the list using the Collections.frequency() method and prints the frequency of each element. Lastly, the program demonstrates how to shuffle the elements of an ArrayList randomly using the Collections.shuffle() method, printing the shuffled list to show the result.

Each of these operations illustrates the versatility of the ArrayList class in Java, covering a wide range of tasks from basic element manipulation to advanced operations such as sorting, removing duplicates, and calculating the median. The program is a comprehensive guide for working with ArrayList and shows how to use Java’s collection framework effectively for various tasks.
